// Examples for the syntax of the language

/*
    Write comments with
    '//' for a single line 
    or 
    /* comment */ for a block-comment which supports multiline and nesting
*/

// Variable binding
let a = 1;

// Currently supported data-types
// String, Number(integers and floats), Boolean and none

// Printing to stdout
print a; // prints '1' to command line

// Variable mutation
a = 2;

// Arithmetic operators
// +, -, *, / (Modulus and bitwise are currently not implemented)

// Compound assignment
a += 3;
a -= 3;
a *= 2;
a /= 2;

// Ternary operator
let x = 1 == 2 ? true : false;

// Declaring a local scope 

{
    let a = 1;

    {
        let a = 2.4; 
        print a; // prints '2'
    }
    print a; // prints '1'
}

// Conditionals
if (a == 1) print a;

if (a != 1) {
    print 2;
} elif (a > 2){
    print "Greater";
} else {
    print a;
}

// Loops

while (a != 10) {
    // do stuff
    break; // The break keyword exits the loop when encountered.
} 

for (let j = 0; j < 10; j++) {
    // do stuff
    continue; // The continue keyword passes to the next interation of the loop when encountered.
}

// Function declaration

fn greet(name) {
    print "Hello" + name; // String concatenation is inbuilt
}

// Function call

greet(" user!"); // prints 'Hello world!'


// Returning values

fn add(a, b) {
    return a + b;
}

let three = add(1, 2);

// Lambda functions
// Lambdas are the same as functions but have no name
// Syntax: lm(params...) {}

let lambda = lm() {
    print "Hello world!";
};

// Call lambda function
lambda(); // prints 'Hello world!' to stdout


class User { // <- Class declaration
    private password; // This line declares a private field named 'password'

    // private fields can be declared without the 'private' keyword
    private_variable; // <- private by default

    private tries; // Same goes here
    public name; // This line declares a public field named 'password'

    init(name, password) {
        this.name = name; // Access the fields with the 'this' refernce to the class
        this.password = password;
        this.tries = 3;
    }

    // methods are private by default
    public login(password) {
        if (this.password == password) {
            print "Welcome " + this.name + "!";
        } else {
            if (this.tries == 0) {
                print "You ran out of login attempts!";
            } else {
                this.tries -= 1;
                print "Wrong password please try again";
            }
        }
    }
}

let raghu = User("Raghu", "1234"); // Instantiate class by calling the name
raghu.login("1234"); // Standard dot syntax to access class properties
// Accessing private variable will throw an error

class Math {
    static variable; // 'static' variable can be accessed without instantiating the class
    static square(n) { // 'static' methods can be accessed without instantiating the class
        return n * n;
    }
}

print Math.square(4); // prints -> '16'
// Trying to access static variable/methods from an instantiated class will throw an error
