// Examples for the syntax of the language

/*
    Write comments with
    '//' for a single line 
    or 
    /* comment */ for a block-comment which supports multiline and nesting
*/

// Variable binding
let a = 1;

// Currently supported data-types
// String, Number(integers and floats), Boolean and none

// Printing to stdout
print a; // prints '1' to command line

// Variable mutation
a = 2;

// Arithmetic operators
// +, -, *, / (Modulus and bitwise are currently not implemented)

// Compound assignment
a += 3;
a -= 3;
a *= 2;
a /= 2;

// Ternary operator
let x = 1 == 2 ? true : false;

// Declaring a local scope 

{
    let a = 1;

    {
        let a = 2.4; 
        print a; // prints '2'
    }
    print a; // prints '1'
}

// Conditionals
if (a == 1) print a;

if (a != 1) {
    print 2;
} elif (a > 2){
    print "Greater";
} else {
    print a;
}

// Loops

while (a != 10) {
    // do stuff
    break; // The break keyword exits the loop when encountered.
} 

for (let i = 0; i < 10; i += 1) {
    // do stuff
    continue; // The continue keyword passes to the next interation of the loop when encountered.
}

// Function declaration

fn greet(name) {
    print "Hello" + name; // String concatenation is inbuilt
}

// Function call

greet(" user!"); // prints 'Hello world!'


// Returning values

fn add(a, b) {
    return a + b;
}

let three = add(1, 2);

// Lambda functions
// Lambdas are the same as functions but have no name
// Syntax: lm(params...) {}

let lambda = lm() {
    print "Hello world!";
}

// Call lambda function
lambda(); // prints 'Hello world!' to stdout
